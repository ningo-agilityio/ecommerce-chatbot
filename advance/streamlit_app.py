from typing import Any
from chatbot.agent_executor import run_with_memory
import streamlit as st

from dotenv import load_dotenv
from langchain_core.messages import AIMessage, HumanMessage
from langchain.callbacks.base import BaseCallbackHandler
load_dotenv()

### Utils
class StreamlitCallbackHandler(BaseCallbackHandler):
    def __init__(self, placeholder):
        self.placeholder = placeholder
        self.current_text = ""

    def on_llm_new_token(self, token: str, **kwargs: Any) -> None:
        """Called every time a new token is generated by the language model."""
        self.current_text += token
        # st.session_state.chat_history.append(AIMessage(content=self.current_text))
        self.placeholder.markdown(self.current_text)  

def get_response(user_query):
    response_placeholder = st.empty()

    # Create an instance of the callback handler
    stream_handler = StreamlitCallbackHandler(response_placeholder)

    # Step 3: Pass the callback handler to the agent executor invoke method
    run_with_memory(user_query, stream_handler)

#### Main app
# Show title and description.
st.title("ðŸ’¬ Ecommerce Chatbot")
st.write(
    "This is a simple Ecommerce Chatbot that uses OpenAI's GPT-3.5 model to generate responses. "
)

# session state
if "chat_history" not in st.session_state:
    st.session_state.chat_history = [
        AIMessage(content="Hello, I am an e-commerce chatbot. How can I help you?"),
    ]

# conversation
for message in st.session_state.chat_history:
    if isinstance(message, AIMessage):
        with st.chat_message("AI"):
            st.write(message.content)
    elif isinstance(message, HumanMessage):
        with st.chat_message("Human"):
            st.write(message.content)

# user input
user_query = st.chat_input("Type your message here...")
if user_query is not None and user_query != "":
    st.session_state.chat_history.append(HumanMessage(content=user_query))

    with st.chat_message("Human"):
        st.markdown(user_query)

    with st.chat_message("AI"):
        with st.spinner("Processing..."):
            chain_response = get_response(user_query)
