{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../../src/models/helpers.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAelC,OAAO,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAC;AAE/C,MAAM,UAAU,2BAA2B,CACzC,sBAA8C;IAE9C,OAAO;QACL,IAAI,EAAE,UAAU;QAChB,EAAE,EAAE,sBAAsB,CAAC,EAAE;QAC7B,QAAQ,EAAE,sBAAsB,CAAC,QAAQ;KACtB,CAAC;AACxB,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAC,cAA8B;IAChE,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,cAAc,CAAC;IACpC,QAAQ,IAAI,EAAE,CAAC;QACb,KAAK,UAAU;YACb,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,cAAc,CAAC,QAAQ,EAAE,CAAC;QACzD,KAAK,WAAW;YACd,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,cAAc,CAAC,SAAS,EAAE,CAAC;QAC3D,KAAK,kBAAkB;YACrB,OAAO;gBACL,IAAI;gBACJ,EAAE;gBACF,eAAe,EAAE,yCAAyC,CAAC,cAAc,CAAC,gBAAgB,CAAC;aAC5F,CAAC;QACJ;YACE,MAAM,IAAI,KAAK,CAAC,2BAA2B,IAAI,EAAE,CAAC,CAAC;IACvD,CAAC;AACH,CAAC;AAED,SAAS,yCAAyC,CAChD,oCAA0E;IAE1E,MAAW,IAAI,UAAK,oCAAoC,EAAlD,EAAW,CAAuC,CAAC;IACzD,yBAAY,aAAa,CAAC,IAAI,CAAC,EAAG;AACpC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\nimport {\n  CodeInterpreterToolCallDetailsOutput,\n  RequiredToolCallOutput,\n  ToolCallOutput,\n} from \"../rest/outputModels.js\";\nimport { CodeInterpreterToolCallDetails, RequiredToolCall, ToolCall } from \"./models.js\";\nimport { camelCaseKeys } from \"../api/util.js\";\n\nexport function parseRequiredToolCallOutput(\n  requiredToolCallOutput: RequiredToolCallOutput\n): RequiredToolCall {\n  return {\n    type: \"function\",\n    id: requiredToolCallOutput.id,\n    function: requiredToolCallOutput.function,\n  } as RequiredToolCall;\n}\n\nexport function parseToolCallOutput(toolCallOutput: ToolCallOutput): ToolCall {\n  const { id, type } = toolCallOutput;\n  switch (type) {\n    case \"function\":\n      return { type, id, function: toolCallOutput.function };\n    case \"retrieval\":\n      return { type, id, retrieval: toolCallOutput.retrieval };\n    case \"code_interpreter\":\n      return {\n        type,\n        id,\n        codeInterpreter: parseCodeInterpreterToolCallDetailsOutput(toolCallOutput.code_interpreter),\n      };\n    default:\n      throw new Error(`Unknown tool call type: ${type}`);\n  }\n}\n\nfunction parseCodeInterpreterToolCallDetailsOutput(\n  codeInterpreterToolCallDetailsOutput: CodeInterpreterToolCallDetailsOutput\n): CodeInterpreterToolCallDetails {\n  const { ...rest } = codeInterpreterToolCallDetailsOutput;\n  return { ...camelCaseKeys(rest) };\n}\n"]}