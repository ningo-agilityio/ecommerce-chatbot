{"version":3,"file":"models.js","sourceRoot":"","sources":["../../../src/models/models.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n/** The request details to use when creating a new assistant. */\nexport interface AssistantCreationOptions {\n  /** The ID of the model to use. */\n  model: string;\n  /** The name of the new assistant. */\n  name?: string | null;\n  /** The description of the new assistant. */\n  description?: string | null;\n  /** The system instructions for the new assistant to use. */\n  instructions?: string | null;\n  /** The collection of tools to enable for the new assistant. */\n  tools?: ToolDefinition[];\n  /** A list of previously uploaded file IDs to attach to the assistant. */\n  fileIds?: string[];\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata?: Record<string, string> | null;\n}\n\n/** The input definition information for a code interpreter tool as used to configure an assistant. */\nexport interface CodeInterpreterToolDefinition {\n  /** The object type, which is always 'code_interpreter'. */\n  type: \"code_interpreter\";\n}\n\n/** The input definition information for a retrieval tool as used to configure an assistant. */\nexport interface RetrievalToolDefinition {\n  /** The object type, which is always 'retrieval'. */\n  type: \"retrieval\";\n}\n\n/** The input definition information for a function tool as used to configure an assistant. */\nexport interface FunctionToolDefinition {\n  /** The object type, which is always 'function'. */\n  type: \"function\";\n  /** The definition of the concrete function that the function tool should call. */\n  function: FunctionDefinition;\n}\n\n/** The input definition information for a function. */\nexport interface FunctionDefinition {\n  /** The name of the function to be called. */\n  name: string;\n  /** A description of what the function does, used by the model to choose when and how to call the function. */\n  description: string;\n  /** The parameters the functions accepts, described as a JSON Schema object. */\n  parameters: unknown;\n}\n\n/** Represents an assistant that can call the model and use tools. */\nexport interface Assistant {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n  /** The Unix timestamp, in seconds, representing when this object was created. */\n  createdAt: Date;\n  /** The name of the assistant. */\n  name: string | null;\n  /** The description of the assistant. */\n  description: string | null;\n  /** The ID of the model to use. */\n  model: string;\n  /** The system instructions for the assistant to use. */\n  instructions: string | null;\n  /** The collection of tools enabled for the assistant. */\n  tools: ToolDefinition[];\n  /** A list of attached file IDs, ordered by creation date in ascending order. */\n  fileIds: string[];\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata?: Record<string, string> | null;\n}\n\n/** The request details to use when modifying an existing assistant. */\nexport interface UpdateAssistantOptions {\n  /** The ID of the model to use. */\n  model?: string;\n  /** The modified name for the assistant to use. */\n  name?: string | null;\n  /** The modified description for the assistant to use. */\n  description?: string | null;\n  /** The modified system instructions for the new assistant to use. */\n  instructions?: string | null;\n  /** The modified collection of tools to enable for the assistant. */\n  tools?: ToolDefinition[];\n  /** The modified list of previously uploaded fileIDs to attach to the assistant. */\n  fileIds?: string[];\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata?: Record<string, string> | null;\n}\n\n/** An abstract representation of an OpenAI deletion operation result status. */\nexport interface DeletionStatus {\n  /** The ID of the resource specified for deletion. */\n  id: string;\n  /** A value indicating whether deletion was successful. */\n  deleted: boolean;\n}\n\n/** The status of an assistant deletion operation. */\nexport interface AssistantDeletionStatus extends DeletionStatus {}\n\n/** Information about a file attached to an assistant, as used by tools that can read files. */\nexport interface AssistantFile {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n  /** The Unix timestamp, in seconds, representing when this object was created. */\n  createdAt: Date;\n  /** The assistant ID that the file is attached to. */\n  assistantId: string;\n}\n\n/** The status of an assistant file deletion operation. */\nexport interface AssistantFileDeletionStatus extends DeletionStatus {}\n\n/** The details used to create a new assistant thread. */\nexport interface AssistantThreadCreationOptions {\n  /** The messages to associate with the new thread. */\n  messages?: {\n    /** The role associated with the assistant thread message. */\n    role: string;\n    /** The list of content items associated with the assistant thread message. */\n    content: string;\n  }[];\n  /** A set of key/value pairs used to store additional information about the object. */\n  metadata?: Record<string, string>;\n}\n\n/** A single message within an assistant thread, as provided during that thread's creation for its initial state. */\nexport interface ThreadInitializationMessage {\n  /** The role associated with the assistant thread message. Currently, only 'user' is supported when providing initial messages to a new thread. */\n  role: MessageRole;\n  /** The textual content of the initial message. Currently, robust input including images and annotated text may only be provided via a separate call to the create message API. */\n  content: string;\n  /**\n   * A list of file IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can\n   * access files.\n   */\n  fileIds?: string[];\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata: Record<string, string> | null;\n}\n\n/** Information about a single thread associated with an assistant. */\nexport interface AssistantThread {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n  /** The Unix timestamp, in seconds, representing when this object was created. */\n  createdAt: Date;\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata: Record<string, string> | null;\n}\n\n/** The status of a thread deletion operation. */\nexport interface ThreadDeletionStatus extends DeletionStatus {}\n\n/** A single, existing message within an assistant thread. */\nexport interface ThreadMessage {\n  /** The identifier, which can be referenced in API endpoints. */\n  id?: string;\n  /** The Unix timestamp, in seconds, representing when this object was created. */\n  createdAt?: Date;\n  /** The ID of the thread that this message belongs to. */\n  threadId?: string;\n  /** The role associated with the assistant thread message. */\n  role: string;\n  /** The list of content items associated with the assistant thread message. */\n  content: MessageContent[];\n  /** If applicable, the ID of the assistant that authored this message. */\n  assistantId?: string;\n  /** If applicable, the ID of the run associated with the authoring of this message. */\n  runId?: string;\n  /** The IDs for the files associated with this message. */\n  fileIds?: string[];\n  /** A set of key/value pairs used to store additional information about the object. */\n  metadata: Record<string, string> | null;\n}\n\n/** A representation of a textual item of thread message content. */\nexport interface MessageTextContent {\n  /** The object type, which is always 'text'. */\n  type: \"text\";\n  /** The text and associated annotations for this thread message content item. */\n  text: MessageTextDetails;\n}\n\n/** The text and associated annotations for a single item of assistant thread message content. */\nexport interface MessageTextDetails {\n  /** The text data. */\n  value: string;\n  /** A list of annotations associated with this text. */\n  annotations: MessageTextAnnotation[];\n}\n\n/** A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the 'retrieval' tool to search files. */\nexport interface MessageTextFileCitationAnnotation {\n  /** The object type, which is always 'file_citation'. */\n  type: \"file_citation\";\n  /** The textual content associated with this text annotation item. */\n  text: string;\n  /** The first text index associated with this text annotation. */\n  startIndex: number;\n  /** The last text index associated with this text annotation. */\n  endIndex: number;\n  /**\n   * A citation within the message that points to a specific quote from a specific file.\n   * Generated when the assistant uses the \"retrieval\" tool to search files.\n   */\n  fileCitation: MessageTextFileCitationDetails;\n}\n\n/** A representation of a file-based text citation, as used in a file-based annotation of text thread message content. */\nexport interface MessageTextFileCitationDetails {\n  /** The ID of the file associated with this citation. */\n  fileId: string;\n  /** The specific quote cited in the associated file. */\n  quote: string;\n}\n\n/** A citation within the message that points to a file located at a specific path. */\nexport interface MessageTextFilePathAnnotation {\n  /** The object type, which is always 'file_path'. */\n  type: \"file_path\";\n  /** The textual content associated with this text annotation item. */\n  text: string;\n  /** The first text index associated with this text annotation. */\n  startIndex: number;\n  /** The last text index associated with this text annotation. */\n  endIndex: number;\n  /** A URL for the file that's generated when the assistant used the code_interpreter tool to generate a file. */\n  filePath: MessageTextFilePathDetails;\n}\n\n/** An encapsulation of an image file ID, as used by message image content. */\nexport interface MessageTextFilePathDetails {\n  /** The ID of the specific file that the citation is from. */\n  fileId: string;\n}\n\n/** A representation of image file content in a thread message. */\nexport interface MessageImageFileContent {\n  /** The object type, which is always 'image_file'. */\n  type: \"image_file\";\n  /** The image file for this thread message content item. */\n  imageFile: MessageImageFileDetails;\n}\n\n/** An image reference, as represented in thread message content. */\nexport interface MessageImageFileDetails {\n  /** The ID for the file associated with this image. */\n  fileId: string;\n}\n\n/** An encapsulation of an image file ID, as used by message image content. */\nexport interface MessageImageFileIdDetails {\n  /** The ID of the specific image file. */\n  fileId: string;\n}\n\n/** Information about a file attached to an assistant thread message. */\nexport interface MessageFile {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n  /** The Unix timestamp, in seconds, representing when this object was created. */\n  createdAt: Date;\n  /** The ID of the message that this file is attached to. */\n  messageId: string;\n}\n\n/** The details used when creating a new run of an assistant thread. */\nexport interface CreateRunOptions {\n  /** The ID of the assistant that should run the thread. */\n  assistantId: string;\n  /** The overridden model name that the assistant should use to run the thread. */\n  model?: string | null;\n  /** The overridden system instructions that the assistant should use to run the thread. */\n  instructions?: string | null;\n  /**\n   * Additional instructions to append at the end of the instructions for the run. This is useful for modifying the behavior\n   * on a per-run basis without overriding other instructions.\n   */\n  additionalInstructions?: string | null;\n  /** The overridden list of enabled tools that the assistant should use to run the thread. */\n  tools?: ToolDefinition[] | null;\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata?: Record<string, string> | null;\n}\n\n/** Data representing a single evaluation run of an assistant thread. */\nexport interface ThreadRun {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n  /** The ID of the thread associated with this run. */\n  threadId: string;\n  /** The ID of the assistant associated with the thread this run was performed against. */\n  assistantId: string;\n  /** The status of the assistant thread run. */\n  status: RunStatus;\n  /** The details of the action required for the assistant thread run to continue. */\n  requiredAction?: RequiredAction | null;\n  /** The last error, if any, encountered by this assistant thread run. */\n  lastError?: RunError | null;\n  /** The ID of the model to use. */\n  model: string;\n  /** The overriden system instructions used for this assistant thread run. */\n  instructions: string;\n  /** The overriden enabled tools used for this assistant thread run. */\n  tools: ToolDefinition[];\n  /** A list of attached file IDs, ordered by creation date in ascending order. */\n  fileIds: string[];\n  /** The Unix timestamp, in seconds, representing when this object was created. */\n  createdAt: Date;\n  /** The Unix timestamp, in seconds, representing when this item expires. */\n  expiresAt: Date | null;\n  /** The Unix timestamp, in seconds, representing when this item was started. */\n  startedAt: Date | null;\n  /** The Unix timestamp, in seconds, representing when this completed. */\n  completedAt: Date | null;\n  /** The Unix timestamp, in seconds, representing when this was cancelled. */\n  cancelledAt: Date | null;\n  /** The Unix timestamp, in seconds, representing when this failed. */\n  failedAt: Date | null;\n  /** A set of key/value pairs used to store additional information about the object. */\n  metadata?: Record<string, string> | null;\n}\n\n/** An abstract representation of a required action for an assistant thread run to continue. */\nexport interface RequiredAction {\n  /** the discriminator possible values: submit_tool_outputs */\n  type: string;\n  /** The details describing tools that should be called to submit tool outputs. **/\n  submitToolOutputs?: SubmitToolOutputsDetails;\n}\n\n/** The details describing tools that should be called to submit tool outputs. */\nexport interface SubmitToolOutputsDetails {\n  /** The list of tool calls that must be resolved for the assistant thread run to continue. */\n  toolCalls: RequiredToolCall[];\n}\n\n/** A representation of a requested call to a function tool, needed by the model to continue evaluation of a run. */\nexport interface RequiredFunctionToolCall {\n  /** The object type of the required tool call. Always 'function' for function tools. */\n  type: \"function\";\n  /** The ID of the tool call. This ID must be referenced when submitting tool outputs. */\n  id: string;\n  /** Detailed information about the function to be executed by the tool that includes name and arguments. */\n  function: FunctionToolCallDetails;\n}\n\n/** The details of an error as encountered by an assistant thread run. */\nexport interface RunError {\n  /** The status for the error. */\n  code: string;\n  /** The human-readable text associated with the error. */\n  message: string;\n}\n\n/** The data provided during a tool outputs submission to resolve pending tool calls and allow the model to continue. */\nexport interface ToolOutput {\n  /** The ID of the tool call being resolved, as provided in the tool calls of a required action from a run. */\n  toolCallId?: string;\n  /** The output from the tool to be submitted. */\n  output?: string;\n}\n\n/** The details used when creating and immediately running a new assistant thread. */\nexport interface CreateAndRunThreadOptions {\n  /** The ID of the assistant for which the thread should be created. */\n  assistantId: string;\n  /** The details used to create the new thread. */\n  thread?: AssistantThreadCreationOptions;\n  /** The overridden model that the assistant should use to run the thread. */\n  model?: string;\n  /** The overridden system instructions the assistant should use to run the thread. */\n  instructions?: string;\n  /** The overridden list of enabled tools the assistant should use to run the thread. */\n  tools?: ToolDefinition[];\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata?: Record<string, string> | null;\n}\n\n/** Detailed information about a single step of an assistant thread run. */\nexport interface RunStep {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n  /** The type of run step, which can be either message_creation or tool_calls. */\n  type: RunStepType;\n  /** The ID of the assistant associated with the run step. */\n  assistantId: string;\n  /** The ID of the thread that was run. */\n  threadId: string;\n  /** The ID of the run that this run step is a part of. */\n  runId: string;\n  /** The status of this run step. */\n  status: RunStepStatus;\n  /** The details for this run step. */\n  stepDetails: RunStepDetails;\n  /** If applicable, information about the last error encountered by this run step. */\n  lastError: RunStepError | null;\n  /** The Unix timestamp, in seconds, representing when this object was created. */\n  createdAt: Date;\n  /** The Unix timestamp, in seconds, representing when this item expired. */\n  expiredAt: Date | null;\n  /** The Unix timestamp, in seconds, representing when this completed. */\n  completedAt: Date | null;\n  /** The Unix timestamp, in seconds, representing when this was cancelled. */\n  cancelledAt: Date | null;\n  /** The Unix timestamp, in seconds, representing when this failed. */\n  failedAt: Date | null;\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata?: Record<string, string> | null;\n}\n\n/** The detailed information associated with a message creation run step. */\nexport interface RunStepMessageCreationDetails {\n  /** The object type, which is always 'message_creation'. */\n  type: \"message_creation\";\n  /** Information about the message creation associated with this run step. */\n  messageCreation: RunStepMessageCreationReference;\n}\n\n/** The details of a message created as a part of a run step. */\nexport interface RunStepMessageCreationReference {\n  /** The ID of the message created by this run step. */\n  messageId: string;\n}\n\n/** The detailed information associated with a run step calling tools. */\nexport interface RunStepToolCallDetails {\n  /** The object type, which is always 'tool_calls'. */\n  type: \"tool_calls\";\n  /** A list of tool call details for this run step. */\n  toolCalls: ToolCall[];\n}\n\n/**\n * A record of a call to a code interpreter tool, issued by the model in evaluation of a defined tool, that\n * represents inputs and outputs consumed and emitted by the code interpreter.\n */\nexport interface CodeInterpreterToolCall {\n  /** The object type, which is always 'code_interpreter'. */\n  type: \"code_interpreter\";\n  /** The ID of the tool call. This ID must be referenced when you submit tool outputs. */\n  id: string;\n  /** The details of the tool call to the code interpreter tool. */\n  codeInterpreter: CodeInterpreterToolCallDetails;\n}\n\n/** The detailed information about a code interpreter invocation by the model. */\nexport interface CodeInterpreterToolCallDetails {\n  /** The input provided by the model to the code interpreter tool. */\n  input: string;\n  /** The outputs produced by the code interpreter tool back to the model in response to the tool call. */\n  outputs: CodeInterpreterToolCallOutput[];\n}\n\n/** A representation of a log output emitted by a code interpreter tool in response to a tool call by the model. */\nexport interface CodeInterpreterLogOutput {\n  /** The object type, which is always 'logs'. */\n  type: \"logs\";\n  /** The serialized log output emitted by the code interpreter. */\n  logs: string;\n}\n\n/** A representation of an image output emitted by a code interpreter tool in response to a tool call by the model. */\nexport interface CodeInterpreterImageOutput {\n  /** The object type, which is always 'image'. */\n  type: \"image\";\n  /** Referential information for the image associated with this output. */\n  image: CodeInterpreterImageReference;\n}\n\n/** An image reference emitted by a code interpreter tool in response to a tool call by the model. */\nexport interface CodeInterpreterImageReference {\n  /** The ID of the file associated with this image. */\n  fileId: string;\n}\n\n/**\n * A record of a call to a retrieval tool, issued by the model in evaluation of a defined tool, that represents\n * executed retrieval actions.\n */\nexport interface RetrievalToolCall {\n  /** The object type, which is always 'retrieval'. */\n  type: \"retrieval\";\n  /** The ID of the tool call. This ID must be referenced when you submit tool outputs. */\n  id: string;\n  /** The key/value pairs produced by the retrieval tool. */\n  retrieval: Record<string, string>;\n}\n\n/**\n * A record of a call to a function tool, issued by the model in evaluation of a defined tool, that represents the inputs\n * and output consumed and emitted by the specified function.\n */\nexport interface FunctionToolCall {\n  /** The object type, which is always 'function'. */\n  type: \"function\";\n  /** The ID of the tool call. This ID must be referenced when you submit tool outputs. */\n  id: string;\n  /** The detailed information about the function called by the model. */\n  function: FunctionToolCallDetails;\n}\n\n/** The detailed information about the function called by the model. */\nexport interface FunctionToolCallDetails {\n  /** The name of the function. */\n  name: string;\n  /** The arguments that the model requires are provided to the named function. */\n  arguments: string;\n  /** The output of the function, only populated for function calls that have already have had their outputs submitted. */\n  output: string | null;\n}\n\n/** The error information associated with a failed run step. */\nexport interface RunStepError {\n  /** The error code for this error. */\n  code: RunStepErrorCode;\n  /** The human-readable text associated with this error. */\n  message: string;\n}\n\n/** The error information associated with a failed run step. */\nexport interface RunStepError {\n  /** The error code for this error. */\n  code: RunStepErrorCode;\n  /** The human-readable text associated with this error. */\n  message: string;\n}\n\n/** The response data from a file list operation. */\nexport interface FileListResponse {\n  /** The files returned for the request. */\n  data: InputFile[];\n}\n\n/** Represents an assistant that can call the model and use tools. */\nexport interface InputFile {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n  /** The size of the file, in bytes. */\n  bytes: number;\n  /** The name of the file. */\n  filename: string;\n  /** The Unix timestamp, in seconds, representing when this object was created. */\n  createdAt: Date;\n  /** The intended purpose of a file. */\n  purpose: FilePurpose;\n}\n\n/** A status response from a file deletion operation. */\nexport interface FileDeletionStatus extends DeletionStatus {\n  /** The ID of the deleted file. */\n  id: string;\n}\n\n/** An abstract representation of an annotation to text thread message content. */\nexport interface ThreadMessageTextAnnotation {\n  /** the discriminator possible values file_citation, file_path */\n  type: string;\n  /** The textual content associated with this text annotation item. */\n  text: string;\n  /** The first text index associated with this text annotation. */\n  startIndex: number;\n  /** The last text index associated with this text annotation. */\n  endIndex: number;\n}\n\n/** The response data for a requested list of items. */\nexport interface ListResponseOf<T> {\n  /** The requested list of items. */\n  data: T[];\n  /** The first ID represented in this list. */\n  firstId: string;\n  /** The last ID represented in this list. */\n  lastId: string;\n  /** A value indicating whether there are additional values available not captured in this list. */\n  hasMore: boolean;\n}\n\n/** The available sorting options when requesting a list of response objects. */\n/** \"asc\", \"desc\" */\nexport type ListSortOrder = string;\n/** The possible values for roles attributed to messages in a thread. */\n/** \"user\", \"assistant\" */\nexport type MessageRole = string;\n/** Possible values for the status of an assistant thread run. */\n/** \"queued\", \"in_progress\", \"requires_action\", \"cancelling\", \"cancelled\", \"failed\", \"completed\", \"expired\" */\nexport type RunStatus = string;\n/** The possible types of run steps. */\n/** \"message_creation\", \"tool_calls\" */\nexport type RunStepType = string;\n/** Possible values for the status of a run step. */\n/** \"in_progress\", \"cancelled\", \"failed\", \"completed\", \"expired\" */\nexport type RunStepStatus = string;\n/** Possible error code values attributable to a failed run step. */\n/** \"server_error\", \"rate_limit_exceeded\" */\nexport type RunStepErrorCode = string;\n/** The possible values denoting the intended usage of a file. */\n/** \"fine-tune\", \"fine-tune-results\", \"assistants\", \"assistants_output\" */\nexport type FilePurpose = string;\n/** Alias for MessageContent */\nexport type MessageContent = MessageTextContent | MessageImageFileContent;\n/** Alias for MessageTextAnnotation */\nexport type MessageTextAnnotation =\n  | MessageTextFileCitationAnnotation\n  | MessageTextFilePathAnnotation;\n/** Alias for RequiredToolCall */\nexport type RequiredToolCall = RequiredFunctionToolCall;\n/** Alias for RunStepDetails */\nexport type RunStepDetails = RunStepMessageCreationDetails | RunStepToolCallDetails;\n/** Alias for ToolCall */\nexport type ToolCall = CodeInterpreterToolCall | RetrievalToolCall | FunctionToolCall;\n/** Alias for CodeInterpreterToolCallOutput */\nexport type CodeInterpreterToolCallOutput = CodeInterpreterLogOutput | CodeInterpreterImageOutput;\n/** An abstract representation of an input tool definition that an assistant can use. */\nexport type ToolDefinition =\n  | CodeInterpreterToolDefinition\n  | RetrievalToolDefinition\n  | FunctionToolDefinition;\n"]}